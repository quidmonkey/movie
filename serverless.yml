service: movies

frameworkVersion: ">=1.1.0 <2.0.0"

custom:
  dynamodb:
    start:
      inMemory: true
      migrate: true
  secrets: ${file(auth/secrets.json)}
  serverless-offline:
    httpsProtocol: 'auth'

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DYNAMODB_MOVIES_TABLE: node-${self:service}-${opt:stage, self:provider.stage}
    DYNAMODB_USER_TABLE: node-${self:service}-user-${opt:stage, self:provider.stage}
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET, ssm:JWT_SECRET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_MOVIES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}"

functions:
  authorize:
    handler: movies/authorize.authorize

  create:
    handler: movies/create.create
    events:
      - http:
          path: movies
          method: post
          cors: true
          authorizer: authorize

  delete:
    handler: movies/delete.delete
    events:
      - http:
          path: movies/{title}
          method: delete
          cors: true
          authorizer: authorize

  get:
    handler: movies/get.get
    events:
      - http:
          path: movies/{title}
          method: get
          cors: true
          authorizer: authorize

  list:
    handler: movies/list.list
    events:
      - http:
          path: movies
          method: get
          cors: true
          authorizer: authorize

  schema:
    handler: movies/schema.schema
    events:
      - http:
          path: movies/schema
          method: get
          cors: true
          authorizer: authorize

  token:
    handler: movies/token.token
    events:
      - http:
          path: movies/token
          method: post
          cors: true

  update:
    handler: movies/update.update
    events:
      - http:
          path: movies/{title}
          method: put
          cors: true
          authorizer: authorize

  user:
    handler: movies/user.user
    events:
      - http:
          path: movies/user
          method: post
          cors: true

resources:
  Resources:
    MoviesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_MOVIES_TABLE}
        AttributeDefinitions:
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: title
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_USER_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-dynamodb-local
  - serverless-offline
